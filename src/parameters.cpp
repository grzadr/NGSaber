#include "include/parameters.h"

#include <QApplication>
#include <QCommandLineParser>
#include <QCommandLineOption>

#include <QStringList>
#include <QString>

#include <QDebug>

Parameters::Parameters(QApplication *arg_a)
{
	parser.setApplicationDescription("NGSaber");
	parser.addHelpOption();
	parser.addVersionOption();

	parser.addOptions({
		{{"I", "input"},
		 QApplication::translate("main", "List of input files with single reads. "
		 "Files' names, with paths, should be seperated by commas with no spaces."),
		 QApplication::translate("main", "file1.fq,file2.fq,...")},

		{"1",
		 QApplication::translate("main", "List of first files with paired reads. "
		 "Files' names, with paths, should be seperated by commas with no spaces."),
		 QApplication::translate("main", "file1_R1,file2_R1,...")},

		{"2",
		 QApplication::translate("main", "List of second files with paired reads. "
		 "Files' names, with paths, should be seperated by commas with no spaces."),
		 QApplication::translate("main", "file1_R2,file2_R2,...")},

		{{"o", "output_dir"},
		 QApplication::translate("main", "Path to output directory."
		 "\n[DEFAULT = Same as file\'s]"),
		 QApplication::translate("main", "directory")},

		{{"p", "output_prefix"},
		 QApplication::translate("main", "Prefix added to output files. Output file's' "
		 "name is generated by adding prefix to orignal file's name."
		 "\n[DEFAULT = \"CLEANED_\"]"),
		 QApplication::translate("main", "prefix")},

		{{"r", "min_ratio"},
		 QApplication::translate("main", "Required minimal ratio of optimal quality "
		 "nucleotides to all nucleotides required for read to pass filtering"
		 "\n[DEFAULT = 0.75]"),
		 QApplication::translate("main", "float")},

		{{"q", "opt_quality"},
		 QApplication::translate("main", "Optimal quality of nucleotides threshold "
		 "\n[DEFAULT = 30]"),
		 QApplication::translate("main", "int")},

		{{"t", "trash_quality"},
		 QApplication::translate("main", "Trash quality threshold. Nucleotides with "
		 "quality lower than this value will be excluded from reads. To disable this "
		 "feature set value for this option to 0."
		 "\n[DEFAULT = 10]"),
		 QApplication::translate("main", "int")},

		{{"l", "min_length"},
		 QApplication::translate("main", "Reject reads shorter than <int>."
		 "\n[DEFAULT = 0]"),
		 QApplication::translate("main", "int")},

		{"cut_first",
		 QApplication::translate("main", "Cut <int> nucleotides from the beggining of "
		 "the read. This process will be performed before filtering process."
		 "\n[DEFAULT = 0]"),
		 QApplication::translate("main", "int"),},

		{"cut_last",
		 QApplication::translate("main", "Cut <int> nucleotiedes from the end of the "
		 "read. This process will be performed before filtering process."
		 "\n[DEFAULT = 0]"),
		 QApplication::translate("main", "int")},

		{"threads",
		 QApplication::translate("main", "Number of threads for application to utilize."
		 "\n[DEFAULT = 1]"),
		 QApplication::translate("main", "int")},

		{"clever",
		 QApplication::translate("main", "Use advanced algorithm to trim reads."
		 "\n[DEFAULT = FALSE]")},

		{"clever_cuda",
		 QApplication::translate("main", "Use CUDA accelerated advanced trimming "
		 "algorithm."
		 "\n[DEFAULT = FALSE]")},

		{"clever_fast",
		 QApplication::translate("main", "Faster, simplified form of advanced trimming "
		 "algorithm without CUDA acceleration."
		 "\n[DEFAULT = FALSE]")},

		{"rescue",
		 QApplication::translate("main", "Mode avaible only with paired read files. If "
		 "one of paired read meets the requirements it will be saved to separate file."
		 "\n[DEFAULT = FALSE]")},

		{"verbose",
		 QApplication::translate("main", "Print detailed information about work of "
		 "algorithm.\n[DEFAULT = FALSE]")},

		{"phred64",
		 QApplication::translate("main", "Use Phred 64 instead of Phred 33.")}
	});

	parser.process(*arg_a);
}

Parameters::~Parameters()
{

}

Parameters::Result Parameters::processArguments(){

	if (parser.isSet("h"))
		parser.showHelp();

	if (parser.isSet("v"))
		parser.showVersion();

	Result result = Ok;

	if (parser.isSet("I") or parser.isSet("1") or parser.isSet("2")){
		if (parser.isSet("1") and parser.isSet("2")){

				launch_parameters.input_alpha = parser.value("1").split(",");
				launch_parameters.input_beta = parser.value("2").split(",");

				if (launch_parameters.input_alpha.isEmpty()){
					qCritical() << "Option \"-1\": No input files specified";
					result = Error;
				}

				if (launch_parameters.input_beta.isEmpty()){
					qCritical() << "Option \"-2\": No input files specified";
					result = Error;
				}

				if (launch_parameters.input_alpha.size() ==
						launch_parameters.input_beta.size()){
					qCritical() << "Options \"-1\" and \"-2\": Diffrent number of files";
					qCritical() << "\tOption \"-1\": "
								<< launch_parameters.input_alpha.size();
					qCritical() << "\tOption \"-2\": "
								<< launch_parameters.input_beta.size();
					result = Error;
				}

				if (launch_parameters.input_alpha.indexOf("") != -1){
					qCritical() << "Option \"-1\": Empty value in string";
					result = Error;
				}
				if (launch_parameters.input_beta.indexOf("") != -1){
					qCritical() << "Option \"-2\": Empty value in string";
					result = Error;
				}
		} else if (parser.isSet("2")){
			qCritical() << "Option \"-2\": Please specify option \"-1\"";
			result = Error;
		} else if (parser.isSet("1")){
			qCritical() << "Option \"-1\": Please specify option \"-2\"";
			result = Error;
		}

		if (parser.isSet("I")){

			launch_parameters.input_single = parser.value("I").split(",");

			if (launch_parameters.input_single.isEmpty()){
				qCritical() << "Option \"-I\": No input files specified";
				result = Error;
			}

			if (launch_parameters.input_single.indexOf("") != -1){
				qCritical() << "Option \"-I\": Empty value in string" << endl;
				result = Error;
			}
		}
	} else {
		qCritical() << "No input files specified" << endl;
		result = Error;
	}

	if (parser.isSet("output_dir")){
		launch_parameters.output_dir = parser.value("output_dir");
		if (!launch_parameters.output_dir.endsWith("/"))
			launch_parameters.output_dir += "/";
	}

	if (parser.isSet("output_prefix"))
		launch_parameters.output_prefix = parser.value("output_prefix");
	if (!launch_parameters.output_prefix.endsWith("_"))
		launch_parameters.output_prefix.append("_");

	if (parser.isSet("min_ratio")){
		bool ok = 0;
		parser.value("min_ratio").toFloat(&ok);
		if (ok)
			launch_parameters.min_ratio = parser.value("min_ratio").toFloat();
		else {
			qCritical() << "Option \"-r, --min_ratio\": \"" << parser.value("min_ratio")
					 << "\" is not a float" << endl;
			result = Error;
		}
		if (launch_parameters.min_ratio < 0){
			qCritical() << "Option \"-r, --min_ratio\": \"" << parser.value("min_ratio")
					 << "\" is a negative number" << endl;
			result = Error;
		}
		if (launch_parameters.min_ratio > 1){
			qCritical() << "Option \"-r, --min_ratio\": \"" << parser.value("min_ratio")
					 << "\" is larger than 1" << endl;
			result = Error;
		}
	}

	if (parser.isSet("opt_quality")){
		bool ok = 0;
		parser.value("opt_quality").toInt(&ok);
		if (ok)
			launch_parameters.quality_opt = parser.value("opt_quality").toInt();
		else {
			qCritical() << "Option \"-q, --opt_quality\": \""
					 << parser.value("opt_quality") << "\" is not an int" << endl;
			result = Error;
		}

		if (launch_parameters.quality_opt < 0){
			qCritical() << "Option \"-q, --opt_quality\": \""
					 << parser.value("opt_quality") << "\" is a negative number";
			result = Error;
		}
	}

	if (parser.isSet("trash_quality")){
		bool ok = 0;
		parser.value("trash_quality").toInt(&ok);
		if (ok)
			launch_parameters.quality_trash = parser.value("trash_quality").toInt();
		else {
			qCritical() << "Option \"-t, --trash_quality\": \""
					 << parser.value("trash_quality") << "\" is not an int";
			result = Error;
		}
		if (launch_parameters.quality_trash < 0){
			qCritical() << "Option \"-t, --trash_quality\": \""
					 << parser.value("trash_quality") << "\" is a negative number";
			result = Error;
		}
	}

	if (parser.isSet( "min_length")){
		bool ok = 0;
		parser.value( "min_length" ).toInt(&ok);
		if (ok)
			launch_parameters.min_length = parser.value( "min_length" ).toInt();
		else {
			qCritical() << "Option \"-l, --min_length\": \""
					 << parser.value( "min_length" ) << "\" is not an int" << endl;
			result = Error;
		}
		if (launch_parameters.min_length < 0){
			qCritical() << "Option \"-l, --min_length\": \""
					 << parser.value( "min_length" ) << "\" is a negative number";
			result = Error;
		}
	}

	if (parser.isSet("cut_first")){
		bool ok = 0;
		parser.value("cut_first").toInt(&ok);
		if (ok)
			launch_parameters.cut_first = parser.value("cut_first").toInt();
		else {
			qCritical() << "option \"--cut_first\": \"" << parser.value("cut_first")
					 << "\" is not an int";
			result = Error;
		}
	}

	if (parser.isSet("cut_last")){
		bool ok = 0;
		parser.value("cut_last").toInt(&ok);
		if (ok)
			launch_parameters.cut_last = parser.value("cut_last").toInt();
		else {
			qCritical() << "Option \"--cut_last\": \"" << parser.value("cut_last")
					 << "\" is not an int";
			result = Error;
		}
	}

	if (parser.isSet("threads")){
		bool ok = 0;
		parser.value( "threads" ).toInt(&ok);
		if (ok)
			launch_parameters.threads = parser.value( "threads" ).toInt();
		else {
			qCritical() << "Option \"-t, --threads\": \"" << parser.value( "threads" )
					 << "\" is not an int";
			result = Error;
		}
		if (launch_parameters.threads < 1){
			qCritical() << "Option \"--threads\": \"" << parser.value( "threads" )
					 << "\"is smaller than 1";
			result = Error;
		}
	}

	if (parser.isSet("clever"))
		launch_parameters.mode_clever = Total;

	if (parser.isSet("clever_fast")){
		if (launch_parameters.mode_clever == None)
			launch_parameters.mode_clever = Fast;
		else {
			qCritical() << "Option \"--clever\": Conflict with \"--clever_fast\"";
			result = Error;
		}
	}

	if (parser.isSet("clever_cuda")){
		if (launch_parameters.mode_clever == None)
			launch_parameters.mode_clever = CUDA;
		else if (launch_parameters.mode_clever == Fast){
			qCritical() << "Option \"--clever_cuda\": Conflict with \"--clever_fast\"" << endl;
			result = Error;
		} else if (launch_parameters.mode_clever == Total){
			qCritical() << "Option \"--clever_cuda\": Conflict with \"--clever\"" << endl;
			result = Error;
		}
	}

	if (parser.isSet("rescue"))
		launch_parameters.mode_rescue = 1;
	if (parser.isSet("verbose"))
		launch_parameters.mode_verbose = 1;
	if (parser.isSet("phred64"))
		launch_parameters.quality_phred = 64;
	else
		launch_parameters.quality_phred = 33;

	return result;
}

void Parameters::LaunchParameters::print()
{
	QTextStream terminal(stdout);

	terminal << "PARAMETERS:\n" << endl;

	terminal << "INPUT FILES:" << endl;

	if (input_single.size()){
		QString values = "\n";

		for (int i = 0; i < input_single.size(); ++i){
			values += "\t\t" + input_single.at(i);
			if ( i < input_single.size() - 1 )
				values += "\n";
		}

		terminal << "\tSINGLE READS: " << values << endl;
	} else
		terminal << "\tSINGLE READS: NONE" << endl;

	if (input_alpha.size()){
		QString values = "";
		for ( int i = 0; i < input_alpha.size(); ++i ){

			values += "\t[" + input_alpha.at(i) + "] - [" +
					input_beta.at(i) + "]\n";

			if ( i < input_alpha.size() - 1) values += " ";
		}
		terminal << "\tPAIRED READS:\n" << values << endl;
	} else
		terminal << "\tPAIRED READS: NONE" << endl;

	terminal << endl;
	terminal << "OUTPUT:" << endl;
	terminal << "\tOUTPUT DIRECTORY: \"" << output_dir << "\"" << endl;
	terminal << "\tOUTPUT PREFIX: \"" << output_prefix << "\"" << endl;
	terminal << endl;
	terminal << "PARAMETERS: " << endl;
	terminal << "\tMIN LENGTH: " << min_length << endl;
	terminal << "\tRATIO: " << min_ratio << endl;
	terminal << "\tOPTIMAL QUALITY: " << quality_opt << endl;
	terminal << "\tTRASH QUALITY: " << quality_trash << endl;
	terminal << "\tPHRED " << quality_phred << endl;
	terminal << endl;
	terminal << "EDITING ARGUMENTS:" << endl;
	terminal << "\tCUT FIRST:" << cut_first << endl;
	terminal << "\tCUT LAST:" << cut_last << endl;
	terminal << endl;
	terminal << "MODES:" << endl;
	terminal << "\tCLEVER MODE: ";
	switch (mode_clever){
		case None:
			terminal << "None" << endl;
			break;
		case Fast:
			terminal << "Fast" << endl;
			break;
		case Total:
			terminal << "Total" << endl;
			break;
		case CUDA:
			terminal << "CUDA" << endl;
			break;
	}

	terminal << "\tRESCUE MODE: " <<mode_rescue << endl;
	terminal << "\tVERBOSE MODE: " << mode_verbose << endl;
	terminal << endl;
	terminal << "THREADS: " << threads << endl;
	terminal << endl;
}
